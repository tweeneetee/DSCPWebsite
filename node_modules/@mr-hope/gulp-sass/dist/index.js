"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sassSync = exports.sass = void 0;
const chalk_1 = require("chalk");
const path_1 = require("path");
const sass_1 = require("sass");
const stream_1 = require("stream");
const PluginError = require("plugin-error");
const clonedeep = require("lodash/cloneDeep");
const stripAnsi = require("strip-ansi");
const applySourceMap = require("vinyl-sourcemaps-apply");
const replaceExtension = require("replace-ext");
const PLUGIN_NAME = "gulp-sass";
const handleFile = (file, sassObj) => {
    if (sassObj.map) {
        const sassMap = JSON.parse(sassObj.map.toString());
        const sassMapFile = sassMap.file.replace(/^stdout$/, "stdin");
        const sassFileSrc = file.relative;
        const sassFileSrcPath = path_1.dirname(sassFileSrc);
        let sourceFileIndex;
        if (sassFileSrcPath)
            sourceFileIndex = sassMap.sources.indexOf(sassMapFile);
        sassMap.sources = sassMap.sources.map((source, index) => index === sourceFileIndex ? source : path_1.join(sassFileSrcPath, source));
        sassMap.sources = sassMap.sources.filter((src) => src && src !== "stdin");
        sassMap.file = replaceExtension(sassFileSrc, ".css");
        applySourceMap(file, sassMap);
    }
    file.contents = sassObj.css;
    file.path = replaceExtension(file.path, ".css");
    if (file.stat)
        file.stat.atime = file.stat.mtime = file.stat.ctime = new Date();
    return file;
};
const sass = (pluginOptions = {}, sync) => new stream_1.Transform({
    objectMode: true,
    transform(file, _enc, callback) {
        const options = clonedeep(pluginOptions);
        if (file.isNull())
            return callback(null, file);
        if (file.isStream())
            return callback(new PluginError(PLUGIN_NAME, "Streaming not supported"));
        if (file.isBuffer()) {
            if (path_1.basename(file.path).indexOf("_") === 0)
                return callback();
            if (!file.contents.length) {
                file.path = replaceExtension(file.path, ".css");
                return callback(null, file);
            }
            options.data = file.contents.toString();
            options.file = file.path;
            if (path_1.extname(file.path) === ".sass")
                options.indentedSyntax = true;
            if (!options.includePaths)
                options.includePaths = [];
            options.includePaths.unshift(path_1.dirname(file.path));
            if (file.sourceMap) {
                options.sourceMap = file.path;
                options.omitSourceMapUrl = true;
                options.sourceMapContents = true;
            }
            const errorHandler = (error) => {
                const filePath = (error.file === "stdin" ? file.path : error.file) || file.path;
                const relativePath = path_1.relative(process.cwd(), filePath);
                const message = [chalk_1.underline(relativePath), error.formatted].join("\n");
                error.messageFormatted = message;
                error.messageOriginal = error.message;
                error.message = stripAnsi(message);
                error.relativePath = relativePath;
                return callback(new PluginError(PLUGIN_NAME, error));
            };
            if (sync)
                try {
                    return callback(null, handleFile(file, sass_1.renderSync(options)));
                }
                catch (error) {
                    return errorHandler(error);
                }
            else
                return sass_1.render(options, (error, result) => {
                    if (error)
                        return errorHandler(error);
                    return callback(null, handleFile(file, result));
                });
        }
    },
});
exports.sass = sass;
function logError(error) {
    const message = new PluginError("sass", error.messageFormatted || "").toString();
    process.stderr.write(`${message}\n`);
    this.emit("end");
}
exports.sass.logError = logError;
const sassSync = (pluginOptions) => exports.sass(pluginOptions, true);
exports.sassSync = sassSync;
exports.sassSync.logError = logError;
//# sourceMappingURL=index.js.map